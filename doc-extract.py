import sys, re
import reporter, texto
from pygments            import highlight
from pygments.lexers     import CLexer
from pygments.formatters import HtmlFormatter


__doc__ = """
Extracts structure from specifically formatted C header files.
"""

RE_DOC_LINE    = re.compile("\s*//(.*)")
RE_DOC_START   = re.compile("/\*\*?(.*)")
RE_DOC_BODY    = re.compile("\s*\*\s*(.*)")
RE_DOC_END     = re.compile("\*/()")
RE_STRUCTURE   = re.compile("\s*@(\w+)\s*")
RE_EMPTY       = re.compile("^\s*$")

RE_MACRO       = re.compile("#define\s+(\w+)")
RE_RETURN      = re.compile("\s*(\w+)")
RE_FUNCTION    = re.compile("\s*(extern|inline)?[\w_]+\s*[\*]*\s+([\w\_]+)")
RE_STRUCT      = re.compile("\s*typedef\s+struct\s+([\w_]+)")
RE_SINGLE      = re.compile("\s*static\s+\w+\s+([\w_]+)")

TYPE_SYMBOL    = "S"
TYPE_DOC       = "D"
TYPE_CODE      = "C"
TYPE_FILE      = "F"

SYMBOL_EXTRACTORS = dict(
	define      = RE_MACRO,
	macro       = RE_MACRO,
	constructor = RE_RETURN,
	destructor  = RE_RETURN,
	type        = RE_STRUCT,
	singleton   = RE_SINGLE,
	method      = RE_FUNCTION,
	operation   = RE_FUNCTION,
	shared      = RE_FUNCTION,
)

HTML_BODY = """
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>${library} &mdash; API</title>
	<body>
		<div class=API>
			<div class="index">
				${index}
			</div>
			<div class="documentation">
				${documentation}
			</div>
		</div>
	</body>
</html>
"""

def strip(lines):
	while lines and RE_EMPTY.match(lines[0]):  lines = lines[1:]
	while lines and RE_EMPTY.match(lines[-1]): lines = lines[:-1]
	return lines

class Library:

	def __init__( self ):
		self.symbols = {}
		self.files   = []
		self.groups  = []

	def addGroups( self, groups ):
		self.groups += groups
		for g in groups:
			if g.type == TYPE_SYMBOL:
				self.symbols[g.name] = g
		return self

class Group:

	def __init__( self, type=None, name=None, code=None, doc=None, classifier=None ):
		self.type = type
		self.name = name
		self.code = code
		self.doc  = [] if doc  is None else doc
		self.code = [] if code is None else code
		self.classifier = classifier
		self.symbols    = {}

class Parser:

	@classmethod
	def Lines( cls, text ):
		"""Iterates through the given text's lines, yielding
		`(number, type, line)` triples."""
		counter = 0
		for line in text.split("\n"):
			m = [m.group(1) for m in (_.match(line) for _ in (RE_DOC_LINE, RE_DOC_START, RE_DOC_BODY, RE_DOC_END)) if m]
			if m:
				s = RE_STRUCTURE.match(m[0])
				if s:
					t,l = TYPE_SYMBOL, s.group(1)
				else:
					t,l = TYPE_DOC, m[0]
			else:
				t,l = TYPE_CODE, line
			counter += 1
			yield counter, t, l

	@classmethod
	def Groups( cls, lines ):
		"""Creates groups out of the lines generated by `ParseLines`"""
		mode    = None
		current = root = Group(type=TYPE_FILE)
		result = [current]
		for i,t,l in lines:
			if   t == TYPE_SYMBOL:
				current = Group(
					type       = TYPE_SYMBOL,
					classifier = l.strip(),
				)
				result.append(current)
			elif t == TYPE_DOC:
				if not current.code:
					current.doc.append(l)
				else:
					current  = Group(
						type = TYPE_FILE,
						doc  = [l],
					)
					result.append(current)
			elif t == TYPE_CODE:
				current.code.append(l)
		# Now we post_process groups
		for group in result:
			if group.type == TYPE_SYMBOL:
				try:
					first_line  = (_ for _ in group.code if _).next()
				except StopIteration:
					reporter.error("Cannot find code for type")
				match       = SYMBOL_EXTRACTORS[group.classifier].match(first_line)
				assert match, "Symbol extractor {0} cannot match {1}".format(group.classifier, first_line)
				group.name = match.groups()[-1]
				root.symbols[group.name] = group
		return result

class Formatter:

	def __init__( self ):
		self._codeLexer     = CLexer()
		self._codeFormatter = HtmlFormatter()

	def format( self, library ):
		index = []
		body  = []
		# The .h file usually starts with a preamble that we'd like to skip
		has_doc = 0
		for group in library.groups:
			d = []
			if group.name:
				l  = '%s %s [|%s|]' % (group.classifier, group.name, group.name)
				d.append(l)
				d.append("-" * len(l))
				d.append("")
			if group.doc:
				if has_doc > 0: d.append(u"\n".join(group.doc))
				has_doc += 1
			if group.code and has_doc > 1:
				code = strip([] + group.code)
				if code:
					code = "\n".join(code)
					# code = highlight(code, self._codeLexer, self._codeFormatter)
					code = "```c\n" + code + "\n```"
					d.append("\n" + code + "\n")
			body.append("\n".join(d))
		# We skip leading whitespace
		body = strip(body)
		return "\n".join(body)

if __name__ == "__main__":
	import ipdb
	args = sys.argv[1:]
	# reporter.install(reporter.StderrReporter)
	lib  = Library()
	for p in args:
		with open(p) as f:
			text   = f.read()
			groups = Parser.Groups(Parser.Lines(text))
			lib.addGroups(groups)
	print texto.toHTML(Formatter().format(lib))

# EOF
